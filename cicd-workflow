pipeline
{
agent any;
stages
{
stage('checkout scm')
{
steps
{
git credentialsId: 'github-creds', url: 'https://github.com/sreedevops26/demo-jan-2021.git'
}
}
stage('execute dockerfile and build image')
{
steps
{
sh 'docker build -t sreedevops26/demodevops:1.0 -f $WORKSPACE/Dockerfile .'
}
}
stage('push newly created image into registry')
{
steps
{
withDockerRegistry([credentialsId: 'docker-creds',  url: 'https://index.docker.io/v1/'])
{
    sh 'docker push sreedevops26/demodevops:1.0'
}
}
}
stage('deploy app on qa')
{
steps
{
script
{
if("${params.select_env}" == "qa")
{
sh "cat /dev/null > /etc/ansible/roles/demo21/vars/main.yml"
sh "echo env: $select_env > /etc/ansible/roles/demo21/vars/main.yml"
//ansiblePlaybook credentialsId: 'ansi-ssh-creds', disableHostKeyChecking: true, installation: 'ansible', inventory: '/etc/ansible/hosts', playbook: '/var/lib/jenkins/workspace/cloudtech21-demo/qa-deploy.yml'
}
}
}
}
stage('deploy app on prod')
{
steps
{
script
{
if("${params.select_env}" == "prod")
{
sh "cat /dev/null > /etc/ansible/roles/demo21/vars/main.yml"
sh "echo env: $select_env > /etc/ansible/roles/demo21/vars/main.yml"
//ansiblePlaybook credentialsId: 'ansi-ssh-creds', disableHostKeyChecking: true, installation: 'ansible', inventory: '/etc/ansible/hosts', playbook: '/var/lib/jenkins/workspace/cloudtech21-demo/prod-deploy.yml'
}
}
}
}
stage('Run ansible playbook on respective env to deploy app')
{
steps
{
ansiblePlaybook credentialsId: 'ansi-ssh-creds', disableHostKeyChecking: true, installation: 'ansible', inventory: '/etc/ansible/roles/demo21/tests/hosts.ini', playbook: '/etc/ansible/roles/demo21/tests/$select_env-deploy.yml'
}
}
}
}
